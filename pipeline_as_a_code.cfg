# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from buildbot.www.hooks.github import GitHubHandler
from buildbot.process.buildstep import BuildStep, ShellMixin
from buildbot.process.remotecommand import RemoteShellCommand
from twisted.internet import defer

# step which analyses .buildbot file and generates required steps
class AnalyseStep(ShellMixin, BuildStep):

    def __init__(self, workdir, **kwargs):
        kwargs = self.setupShellMixin(kwargs, prohibitArgs = ['command',
            'workdir', 'want_stdout'])
        BuildStep.__init__(self, **kwargs)
        self.workdir = workdir

    @defer.inlineCallbacks
    def run(self):
        self.stdio_log = yield self.addLog('stdio')

        cmd = RemoteShellCommand(
                command = ['cat', '.buildbot'],
                workdir = self.workdir,
                want_stdout = True,
                want_stderr = True,
                collectStdout = True
                )
        cmd.useLog(self.stdio_log)
        yield self.runCommand(cmd)

        if cmd.didFail():
            defer.returnValue(util.FAILURE)

        results = []
        for row in cmd.stdout.splitlines():
            lst = row.split()
            dirname = lst.pop(0)
            results.append(steps.ShellCommand(
                name = lst[0],
                command = lst,
                workdir = dirname
                )
            )

        self.build.addStepsAfterCurrentStep(results)
        defer.returnValue(util.SUCCESS)

# shortcut
c = BuildmasterConfig = {}

# create workers
c['workers'] = [worker.Worker('stretch32', 'example_password')]

# general settings
c['title'] = 'Buildbot: test'
c['titleURL'] = 'https://buildbot.example.com/'
c['buildbotURL'] = 'https://buildbot.example.com/'

# setup database
c['db'] = { 'db_url': 'sqlite:///state.sqlite' }

# port to communicate with workers
c['protocols'] = { 'pb': { 'port': 9989 } }

# make buildbot developers a little bit happier
c['buildbotNetUsageData'] = 'basic'

# webserver setup
c['www'] = dict(plugins = dict(waterfall_view={}, console_view={}, grid_view={}))

c['www']['authz'] = util.Authz(
    allowRules = [util.AnyEndpointMatcher(role = 'admins')],
    roleMatchers = [util.RolesFromUsername(roles = ['admins'], usernames = ['root'])]
    )

c['www']['auth'] = util.UserPasswordAuth([('root', 'root_password')])

# setup webhook
c['www']['change_hook_dialects'] = { 'github': {} }

# mail notification
c['services'] = [reporters.MailNotifier(
    fromaddr = 'buildbot@example.com',
    relayhost = 'mail.example.com',
    smtpPort = 25,
    extraRecipients = ['devel@example.com'],
    sendToInterestedUsers = False
    )]

c['schedulers'] = [schedulers.AnyBranchScheduler(
    name = 'Pet Project Scheduler',
    treeStableTimer = None,
    change_filter = util.ChangeFilter(project = 'Pet Project'),
    builderNames = ['Pet Project Builder']
    )]

factory = util.BuildFactory()
factory.addStep(steps.Git(
    repourl = util.Property('repository'),
    workdir = 'sources',
    haltOnFailure = True,
    submodules = True,
    progress = True,
    mode = 'incremental')
    )
factory.addStep(AnalyseStep(
    name = 'Analyse .buildbot file',
    workdir = 'sources',
    haltOnFailure = True,
    hideStepIf = lambda results, s: results == util.SUCCESS)
    )

c['builders'] = [util.BuilderConfig(
    name = 'Pet Project Builder',
    workernames = ['stretch32'],
    factory = factory
    )]
